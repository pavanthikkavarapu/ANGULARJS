Directives.
    - Directives in AngularJS Enhances the HTML Capabilities.

    - we have two types of directives.

    1.Predefined Directives.

        - The Directives Given by the Framework called as Predefined Directives.

        1. ng-app

            - it is a root directive in Angular Application.

            - we can give the logical name for the web application by using ng-app directive.

            - if our application is static ,

               then logical name is optional otherwise mandatory(Dynamic App).

            - we can take only one ng-app directive per web application.

       Autobootstrap.

            Framework starts the execution from ng-app directive , this process

            called as Autobootstrap.


       Manual Bootstrap.

            Running the Angular Application forcefully without ng-app directive

            called as Manual Bootstrap.

ngAppDemo_1.html
-
<!DOCTYPE html>
<html>
    <div ng-app>
        <h1 style="color:red">Addition.{{10+10}}</h1>
         <div>
            <h1 style="color:green">Subtraction.{{20-10}}</h1>
         </div>
    </div>

    <br><br>
    <div>
        <h1 style="color:blue">Multiplication.{{10*10}}</h1>
    </div>
    <script src="bower_components/angular/angular.min.js"></script>
</html>
O/P:
    Addition . 20

    Subtraction . 10

    Multiplication . {{10*10}}


ngAppDemo_2.html
-

<!DOCTYPE html>
<html>
       <h1 style="color:red">Addition.{{10+10}}</h1>
       <h1 style="color:green">Subtraction.{{20-10}}</h1>
       <h1 style="color:blue">Multiplication.{{10*10}}</h1>
       <script src="bower_components/angular/angular.min.js"></script>
       <script>
            angular.bootstrap(document);
       </script>
</html>

O/P.

    Addition . 20
    Subtraction . 10
    Multiplication .100

ngAppDemo_3.html
-
<!DOCTYPE html>
<html>
    <div ng-controller="ctrl">
        <h1 style="color:red">{{var_one}}</h1>
    </div>
    <script src="bower_components/angular/angular.min.js"></script>
    <script>
        var app = angular.module("app",[]);
        app.controller("ctrl",ctrl);
        ctrl.$inject=["$scope"];
        function ctrl($scope){
             $scope.var_one =  "I am from Manual Bootstrap";
        }
        angular.bootstrap(document,["app"]);
    </script>
</html>


ngAppDemo_4.html
-

<div ng-app="app" ng-controller="ctrl_one">
    <h1 style="color:red">{{var_one}}</h1>
</div>

<div ng-controller="ctrl_two" id="my_div">
    <h1 style="color:green">{{var_two}}</h1>
</div>


var my_div= document.getElementById("my_div");
angular.bootstrap(my_div,["app"]);

2.ng-controller.

    - used to declare the controllers in view.

    - we can more than one controller per web application.

    - In genaral we will declare controllers in HTML.

        Ex.
            ng-controller="ctrl"

    - In genaral we will implement controllers in javascript.

        Ex.
            app.controller("ctrl",ctrl);

            ctrl.$inject = ["$scope"];

            function ctrl($scope){

                //Logic Goes Here
            }


ngControllerDemo_1.

    - Implement the three controllers with the given names.

    1.ctrl_one

    2.ctrl_two

    3.ctrl_three

    - "ctrl_one" should initilise the "var_one" with
       "Data from MongoDB Soon..."

    - "ctrl_two" should initilise the "var_two" with
       "Data from MySQL DB Soon..."

    - "ctrl_three" should initilise the "var_three" with
       "Data From Cassandra DB Soon.."


ngControllerDemo_2
-

1.Create two controllers with the given names.

    1.ctrl_one
    2.ctrl_two

2.initilize the "var_one" by using "ctrl_one" with "I am from ctrl_one"

3.initilize the "var_two" by using "ctrl_two" with "I am from ctrl_two"

4.make the availability of "var_one" & "var_two" to the web page scope.


ngControllerDemo_3.

    1. Create one controller with the following name.

        "ctrl"

    2. create one global function with the name.

        "my_fun()"

    3. my_fun() should return local variables.

        1. $scope.var_one="AngularJS";
        2. $scope.var_two="Angular2";
        3. $scope.var_three="Angular3";


ngControllerDemo_4.

    1.Create three controller with parent & child relation.
        - parent_controller
        - child_controller
        - sub_controller

    2. initilize the "parent" variable by using "parent_controller"
       initilize the "child" variable by using "child_controller"
       initilize the "sub" variable by using "sub_controller"

    3. create the css class with the following name.
        "my_class"

3.ng-repeat

    - used to iterate the list of elements from an collection.

Syntax.

    ng-repeat = "'iteration_variable' in 'collection'"


ngRepeatDemo_1

    1. create the Array Statically and iterate by using
       ng-repeat directive.


<p ng-repeat = "x in [10,20,30,40,50]">
    {{x}}
</p>

O/P:
    10
    20
    30
    40
    50

Predefined Services with ng-repeat Directive.

1.$index
    -used to return the indexes of an elements.

2.$first
    - will return first index of an collection as true.

3.$last
    - will return last index of an collection as true.

4.$even
    - will return even indexes of an collection as true.

5.$odd
    - will return odd indexes of an collection as true.

6.$middle
    - will return all the middle indexes of an collection as true.



ngRepeatDemo_2.
    Iterate the Collection from Controller

    app.controller("ctrl",ctrl);
    ctrl.$inject = ["$scope"];
    function ctrl($scope){
        $scope.data = ["Hello_1","Hello_2","Hello_3","Hello_4","Hello_5"];
    }


    <p ng-repeat = "x in data">
        {{x}}
    </p>

O/P:
    Hello_1
    Hello_2
    Hello_3
    Hello_4
    Hello_5


ngRepeatDemo_3.
    Create the JSON Array in Controller.
    Read the Array by using ng-repeat directive.
    Display the Array information in bootstrap table.


app.controller("ctrl" , ctrl);
ctrl.$inject = ["$scope"];
function ctrl($scope){
    $scope.data = [ {"id":1,"name":"Emp_1","age":20},
                    {"id":2,"name":"Emp_2","age":22},
                    {"id":3,"name":"Emp_3","age":24},
                    {"id":4,"name":"Emp_4","age":26},
                    {"id":5,"name":"Emp_5","age":28}
                  ];
}


<p ng-repeat = "x in data">
    {{x.id+"..."+x.name+"..."+x.age}}
</p>

<table class="table table-responsive">
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Age</th>
    </tr>

    <tr ng-repeat = "x in data">
        <td>{{x.id}}</td>
        <td>{{x.name}}</td>
        <td>{{x.age}}</td>
    </tr>
</table>


ngRepeatDemo_4.

    use thr latest directives like "ng-repeat-start" & "ng-repeat-end"

    we can provide the simplified solutions for complex structures

    by using "ng-repeat-start" & "ng-repeat-end"

    these directives will compatible with HTML5.



Code.

    <header ng-repeat-start="x in data">
        {{x.head}}
    </header>

    <div>
        {{x.body}}
    </div>

    <div ng-repeat-end>
        {{x.footer}}
    </div>

4.ng-class-odd

    - used to apply the css classes to the odd rows of table.

Syntax.

    ng-class-odd=" 'css classes' "


5.ng-class-even

    - used to apply the css classes to the even rows of table.

Syntax.

    ng-class-even = " 'css classes' "


[ Note. ng-class-odd & ng-class-even applicable with ng-repeat directive]


Ex.

    app.controller("ctrl" , ctrl);
    ctrl.$inject=["$scope"];
    function ctrl($scope){
        $scope.data=[{"id":1,"name":"Hello_1","age":20},
                      {"id":2,"name":"Hello_2","age":22},
                       {"id":3,"name":"Hello_3","age":24},
                       {"id":4,"name":"Hello_4","age":26},
                       {"id":5,"name":"Hello_5","age":28}];
    }



    <style>
        even{
            color:red;
            text-align:center;
        }

        odd{
            color:green;
            text-align:center;
        }
    </style>

    <table class="table table-bordered">
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Age</th>
        </tr>
        <tr ng-repeat="x in data" ng-class-odd="'odd'" ng-class-even="'even'">
            <td>{{x.id}}</td>
            <td>{{x.name}}</td>
            <td>{{x.age}}</td>
        </tr>
    </table>

6.ng-options.

    - used to populate the data to the dropdown.

Syntax.

    ng-options=" 'model_values'
                    as
                 'dropdown_values'
                    for
                 'iteration_variable'
                     in
                 'collection'  "


Ex_1.

    $scope.data = ["Hello_1","Hello_2","Hello_3","Hello_4","Hello_5"];

model --->     [H_1 to H_5]
dropdown --->  [H_1 to H_5]

<select ng-model="my_model"
        ng-options="y as y for y in data">
        <option value="">--Select One--</option>
</select>



Ex_2.

    $scope.data=[
                    {"id":1,"name":"Hello_1"},
                    {"id":2, "name":"Hello_2"},
                    {"id":3, "name":"Hello_3"},
                    {"id":4, "name":"Hello_4"},
                    {"id":5, "name":"Hello_5"}
                ];


    use case 1.
            dropdown ---[H_1 to H_5]
            model    --- [1 to 5]

    ng-options="x.id as x.name for x in data"



    use case 2.
                dropdown ---[1 to 5]
                model    --- [H_1 to H_5]

    ng-options="x.name as x.id for x in data"


    use case 3.
                    dropdown ---[1 to 5]
                    model    --- [1 to 5]

        ng-options="x.id as x.id for x in data"


    use case 4.
                    dropdown ---[H_1 to H_5]
                    model    --- [H_1 to H_5]

        ng-options="x.name as x.name for x in data"




    $scope.data = [
                    {"id":1,"sub":"English","marks":50},
                    {"id":2,"sub":"Science","marks":60},
                    {"id":3,"sub":"Maths","marks":70}
                  ];

    dropdown --- [1 to 3]
    model    --- [English -- Maths & 50 -- 70]

    ng-options="x.sub+"..."+x.marks as x.id for x in data"


7.ng-init.

        - used to declare the application data statically
          in the form of a "key&value" pairs.

        - each "key&value" pair separated with ";"

        <div ng-init="db_user='root';
                      db_password='root';
                      frequent_changes=true;
                      list_of_tables=['emp','student']"
              {{db_user}}
              {{db_password}}
              {{frequent_changes}}
              <p ng-repeat="x in list_of_tables">{{x}}</p>
        </div>


8.ng-click

    - when ever we click the user interface elements , automatically

      ng-click directive executed by angular framework.


Syntax.

    ng-click = "Expression" /

                "user defined function"

                "user defined function with optional parameters"



ngClickDemo_1.

    Create three buttons.

    1) + --->  glyphicon glyphicon-plus

                count = count+1


    2) blue shaded button  --->  btn btn-primary
                                 {{count}}


    3) - --> glyphicon glyphicon-minus

             count = count-1


 ngClickDemo_2.

    - Declare the user defined function with ng-click directive.

    - clickMe()

    - display the alert message with button click


 Ex.

    <button ng-click="clickMe()">ClickMe</button> // declaration


    app.controller("ctrl" , ctrl);
    ctrl.$inject=["$scope"];
    function ctrl($scope){
        $scope.clickMe = function(){
            alert("ngclick demo");    //impl
        }
    }


ngClickDemo_3.

    1.Create the two models
        1.uname
        2.upwd

    2.declare the user defined function
            login()

    3.create the json object with model data.
        {"u_name":uname,"u_pwd":upwd}

    4. pass the json object to controller with login().
        login({"u_name":uname,"u_pwd":upwd})


9.ng-dblclick.

    - when ever we double click the user interface elements ,

      automatically ng-dblclick directive will be executed by angular

      framework.


Syntax.

    ng-dblclick = "Expression" /

                  "user defined function" /

                  "user defined function with optional parameters"



10.ng-if.

    - used to write the conditions in view.

Syntax.

    ng-if = "true / false"

ngIfDemo_1.

    <lable>Uname.</label>
    <input type="text" ng-model="uname">

    <span ng-if="uname!=null && uname!=''">
        <label>Password.</label>
        <input type="password" ng-model="upwd">
    </span>


ngIfDemo_2
-

<h1 ng-repeat="x in data">
        <!--<span ng-if="x!='Hello_1' && x!='Hello_5'">
            {{x}}
        </span>-->

        <span ng-if="$middle">
            {{x}}
        </span>
</h1>

app.controller("ctrl",ctrl);
ctrl.$inject=["$scope"];
function ctrl($scope) {
      $scope.data = ["Hello_1","Hello_2","Hello_3","Hello_4","Hello_5"];
}

    - framework will store all the form related errors in
     "$error" object.

ngIfDemo_3.
    Display the form errors by using ng-if condition.

<form name="myForm">
    <label>Uname.</label>
    <input type="text"
           name="uname"
           ng-model="uname"
           ng-minlength="3"
           ng-maxlength="6"
           required>
    <h1 ng-if="myForm.uname.$error.minlength">***Minimum 3 characters Are Required****</h1>
    <h1 ng-if="myForm.uname.$error.maxlenggh">***Maximum 6 characters are allowed***</h1>
    <h1 ng-if="myForm.uname.$error.required">***Can't Left Blank***</h1>
</form>


11.ng-switch
    - used to write the switch cases in angular application.

Syntax.
    <div ng-switch="expression">
        <div ng-switch-when="value_one">
            ---
            ---
        </div>
        <div ng-switch-when="value_two">
            ---
            ---
        </div>
            ---
            ---
        <div ng-switch-default>
            ---
            ---
        </div>
    </div>


12. ng-submit.
        - used to submit the form at a time to the controller.

Syntax.

<form ng-submit="login([parameters])">

    ---
    ---
    ---
    <input type="submit">
</form>

 - when ever we click the submit button automatically login() will executes

<form ng-submit="login({'u_name':uname,'u_pwd':upwd})">
        <label>Uname.</label>&emsp;&emsp;&emsp;
        <input type="text" ng-model="uname">

        <br><br>
        <label>Upwd.</label>&emsp;&emsp;&emsp;
        <input type="password" ng-model="upwd">

        <br><br>
        <input type="submit">
</form>

<script>
     angular.module("app",[]).controller("ctrl",function ($scope) {
        $scope.login = function (data) {
             console.log(data.u_name+"..."+data.u_pwd);
        };
     });
</script>

13.ng-cloak
   - used to avoid the flickering affect while displaying the output

   <div ng-cloak ng-controller="ctrl_one">
           <h1>{{var_one}}</h1>
   </div>

   <div ng-cloak ng-controller="ctrl_two">
           <h1>{{var_two}}</h1>
   </div>


14.ng-show.
    - used to show / hide the html elements based on condition.

Syntax.
    ng-show = "true" / "false"

    <p ng-repeat = "x in [10,20,30,40,50]">
         {{x}}
        <button ng-show="$first">First</button>
        <button ng-show="$last">Last</button>
    </p>

15.ng-hide
    - used to show / hide the html elements based on condition.

Syntax.

    ng-hide="true" / "false"


16.ng-change
    - this directive associates with input fields.

    - when ever we change the data in input fields automatically this

      directive executed by angular framework.

Syntax.
    ng-change = "user defined function"


17.ng-include
    - used to divide the view into number of sub views.
    - when ever we divide view into number of sub views automatically
      readability will be increased.

Syntax.

    ng-include = "name of the sub view"


Mouse Events
-

18.ng-mousedown /

   ng-mouseup   /

   ng-mouseover /

   ng-mouseout  /               "user defined function"

   ng-mouseenter /

   ng-mouseleave /

   ng-mousemove

    - when ever we performs the mouse events , automatically
      user defined function will executed by angular framework.